#! question-db-deployment.yaml
# Generated code, do not edit
apiVersion: apps/v1
kind: Deployment
metadata:
    name: question-db
    namespace: code
    labels:
        com.docker.compose.project: code
        com.docker.compose.service: question-db
spec:
    replicas: 1
    selector:
        matchLabels:
            com.docker.compose.project: code
            com.docker.compose.service: question-db
    strategy:
        type: Recreate
    template:
        metadata:
            labels:
                com.docker.compose.project: code
                com.docker.compose.service: question-db
                com.docker.compose.network.question-db-network: "true"
        spec:
            restartPolicy: unless-stopped
            containers:
                - name: question-db
                  image: postgres:16.4
                  imagePullPolicy: IfNotPresent
                  env:
                    - name: EXPRESS_DB_HOST
                      value: "qn-db"
                    - name: EXPRESS_DB_PORT
                      value: "5433"
                    - name: EXPRESS_PORT
                      value: "9002"
                    - name: PGDATA
                      value: "/data/qn-db"
                    - name: POSTGRES_DB
                      value: "question"
                    - name: POSTGRES_PASSWORD
                      value: "Xk8qEcEI2sizjfEn/lF6mLqiyBECjIHY3q6sdXf9poQ="
                    - name: POSTGRES_USER
                      value: "peerprep-qn-express"
                  livenessProbe:
                    exec:
                        command:
                            - /bin/sh
                            - -c
                            - pg_isready -U peerprep-qn-express -d question
                    periodSeconds: 10
                    initialDelaySeconds: 30
                    timeoutSeconds: 10
                    failureThreshold: 5
                  ports:
                    - name: question-d-5432
                      containerPort: 5432
                  volumeMounts:
                    - name: data-qn-db
                      mountPath: /data/qn-db
            volumes:
                - name: data-qn-db
                  persistentVolumeClaim:
                    claimName: question-db-question-db-docker
