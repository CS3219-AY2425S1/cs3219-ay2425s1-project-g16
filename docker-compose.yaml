# Command: docker-compose --env-file .env.local up -d

services:
  # Databases
  user-db:
    hostname: "user-db"
    image: postgres:16.4
    container_name: "user-db"
    build:
      context: ./backend/user/src/lib/db
    env_file:
      - ./backend/user/.env.local
    volumes:
      - "user-db-docker:${USER_PGDATA}"
    restart: unless-stopped
    networks:
      - user-db-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U peerprep-user-express -d user"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  collab-db:
    hostname: "collab-db"
    image: "postgres:16.4"
    container_name: "collab-db"
    build:
      context: ./backend/collaboration/src/lib/db
    env_file:
      - ./backend/collaboration/.env.local
    volumes:
      - "collab-db-docker:/${COLLAB_PGDATA}"
    restart: unless-stopped
    networks:
      - collab-db-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U peerprep-collab-express -d collab"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  question-db:
    hostname: "question-db"
    image: postgres:16.4
    container_name: "question-db"
    build:
      context: ./backend/question/src/lib/db
    env_file:
      - ./backend/question/.env.local
    volumes:
      - "question-db-docker:${QUESTION_PGDATA}"
    restart: unless-stopped
    networks:
      - question-db-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U peerprep-qn-express -d question"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  # Services
  user-service:
    image: "user-express"
    container_name: "user-express"
    build:
      context: ./backend/user
      dockerfile: express.Dockerfile
      target: production
      args: 
        # For building with the correct env vars
        - port=${USER_EXPRESS_PORT}
    ports:
      - "9001:${USER_EXPRESS_PORT}"
    env_file:
      - ./backend/user/.env.compose
    environment:
      # Docker Compose Specific for Service Discovery
      - EXPRESS_DB_HOST=user-db
      - EXPRESS_DB_PORT=5432
    depends_on:
      user-db:
        condition: service_healthy
        restart: true
    networks:
      - user-db-network
      - user-api-network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:9001/health || exit 1
      interval: 30s 
      timeout: 10s   
      retries: 5       
      start_period: 5s

  question-service:
    image: "question-express"
    container_name: "question-express"
    build:
      context: ./backend/question
      dockerfile: express.Dockerfile
      target: production
      args: 
        # For building with the correct env vars
        - port=${QUESTION_EXPRESS_PORT}
    ports:
      - "9002:${QUESTION_EXPRESS_PORT}"
    env_file:
      - ./backend/question/.env.compose
    environment:
      # Docker Compose Specific for Service Discovery
      - EXPRESS_DB_HOST=question-db
      - EXPRESS_DB_PORT=5432
    depends_on:
      question-db:
        condition: service_healthy
        restart: true
    networks:
      - question-db-network
      - question-api-network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:9002/health || exit 1
      interval: 30s 
      timeout: 10s   
      retries: 5       
      start_period: 5s

volumes:
  # Persistent Volumes for Databases
  user-db-docker:
    external: true
  collab-db-docker:
    external: true
  question-db-docker:
    external: true


networks:
  # Isolated API Server Networks
  user-db-network:
    driver: bridge
  question-db-network:
    driver: bridge
  collab-db-network:
    driver: bridge

  # View-Controller Networks
  user-api-network:
    driver: bridge
  question-api-network:
    driver: bridge
  collab-api-network:
    driver: bridge
